from groq import Groq
import json
import traceback
import ast

from config import GROQ_API_KEY
from helper import *

if not GROQ_API_KEY:
    raise ValueError("API key for Groq not found.")


client = Groq(api_key=GROQ_API_KEY)

def chat_with_groq(current_conversation):
    """
    Generates a response from the Groq LLM based on the current conversation context.

    Args:
        current_conversation (object): Object containing a `.messages` list in the format required by Groq's API.

    Returns:
        str: The full response content generated by the Groq model.

    Functionality:
        - Sends the conversation to the Groq API using the 'llama-3.1-8b-instant' model.
        - Streams the response and builds the full output string incrementally.
        - Logs the final response for debugging purposes.

    Assumptions:
        - `client` is an authenticated Groq client object.
    """

    completion = client.chat.completions.create(
            model="llama-3.1-8b-instant",
            messages=current_conversation.messages,
            temperature=1,
            max_tokens=1024,
            top_p=1,
            stream=True,
            stop=None,
        )
    
    response = ""
    for chunk in completion:
        response += chunk.choices[0].delta.content or ""
    
    print(f"Response from Groq: {response}")
    return response

def run_query_and_get_data(current_conversation):
    """
    Generates and executes a SQL query based on a conversation, with built-in safety checks and retry logic.

    Args:
        current_conversation (object): An object containing a `.messages` list representing the chat history 
                                       used to generate SQL queries via a language model.

    Returns:
        list[dict]: 
            - On success: List of dictionaries containing the query results.
            - On failure or disallowed query: A list with a dictionary explaining the reason for rejection or failure.

    Description:
        - Sends the conversation to a language model to generate a SQL query.
        - Rejects execution of any query containing disallowed DML/DDL keywords (e.g., DELETE, DROP, UPDATE).
        - Attempts execution up to 3 times in case of errors or no data.
        - On each failed attempt, appends feedback to the conversation to help the model refine the query.
        - Logs and returns an error message if a runtime exception occurs.

    Notes:
        - Uses `chat_with_groq` to generate SQL queries.
        - Uses `apply_query_sql` to execute read-only SQL safely.
        - Ensures user and data safety by preventing destructive operations.
    """
    try:
        counter = 0
        data, flag, errorMsg = None, None, None
        while counter < 3 and not data:
            response = chat_with_groq(current_conversation)
            response_dict = ast.literal_eval(response)
            required_query = response_dict['query'].replace("\n", " ")
            print(f"Generated SQL Query: {required_query}")
            disallowed_statements = r"(?i)\b(delete|drop|update|alter|truncate|create|replace|insert)\b"

            if re.search(disallowed_statements, required_query.lower().strip()):
                return [{"Request_Rejected":"DML Queries not allowed"}]
            
            data, flag, errorMsg = apply_query_sql(required_query, is_read=True)
            if flag == 'Error':
                current_conversation.messages.append({
                    "role": "user",
                    "content": f"The query you wrote returned error. Error: '{errorMsg}'. Fix the mentioned error and try again. Strictly follow the output format"
                })
            elif flag == 'No Data':
                current_conversation.messages.append({
                    "role": "user",
                    "content": f"The query you wrote returned no data. Please try again with a different query. Strictly follow the output format"
                })
            else:
                return data
            counter += 1
        return [{"Request_Rejected": "No data returned from the query."}]
    except Exception as e:
        print(traceback.format_exc())
        return [{"Request_Rejected":"An error occurred while processing your request."}]